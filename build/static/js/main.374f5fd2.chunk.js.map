{"version":3,"sources":["InfoBox.js","Map.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","cases","total","active","isRed","props","console","log","Card","onClick","className","CardContent","Typography","color","gutterBottom","Map","App","useState","countries","setCountries","country","setCountry","countryInfo","setCountryInfo","useEffect","fetch","then","response","json","data","a","map","name","value","iso2","getCountriesData","FormControl","Select","variant","onChange","event","countryCode","target","url","MenuItem","recovered","deaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"6VA6BeA,MAzBf,YAAoE,IAAjDC,EAAgD,EAAhDA,MAAOC,EAAyC,EAAzCA,MAAOC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,OAAQC,EAAmB,EAAnBA,MAAUC,EAAS,0DAEjE,OADAC,QAAQC,IAAIP,EAAOG,GAEjB,cAACK,EAAA,EAAD,CACEC,QAASJ,EAAMI,QACfC,UAAS,kBAAaP,GAAU,oBAAvB,YACPC,GAAS,gBAHb,SAME,eAACO,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,EAA9C,SACGd,IAEH,oBAAIU,UAAS,0BAAqBN,GAAS,yBAA3C,SACGH,IAGH,eAACW,EAAA,EAAD,CAAYF,UAAU,iBAAiBG,MAAM,gBAA7C,UACGX,EADH,kBCXOa,MARf,WACI,OACI,8BACI,0BCmFGC,MA7Ef,WAAgB,IAAD,EACqBC,mBAAS,IAD9B,mBACNC,EADM,KACKC,EADL,OAEiBF,mBAAS,aAF1B,mBAENG,EAFM,KAEGC,EAFH,OAGyBJ,mBAAS,IAHlC,mBAGNK,EAHM,KAGOC,EAHP,KA6Cb,OAxCAC,qBAAU,WACRC,MAAM,sCACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACLN,EAAeM,QAElB,IAEHL,qBAAU,YACc,uCAAG,sBAAAM,EAAA,sEACjBL,MAAO,4CACZC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACL,IAAMX,EAAYW,EAAKE,KAAI,SAACX,GAAD,MAAc,CACvCY,KAAMZ,EAAQA,QACda,MAAOb,EAAQE,YAAYY,SAE7Bf,EAAaD,MARQ,2CAAH,qDAWtBiB,KACC,IAoBD,qBAAKzB,UAAU,MAAf,SACE,sBAAKA,UAAU,YAAf,UACA,sBAAKA,UAAU,cAAf,UACE,qDACE,cAAC0B,EAAA,EAAD,CAAa1B,UAAU,eAAvB,SACE,eAAC2B,EAAA,EAAD,CAAQC,QAAQ,WAAWC,SAvBb,SAACC,GACvB,IAAMC,EAAcD,EAAME,OAAOT,MACjCZ,EAAWoB,GAEX,IAAME,EACY,cAAhBF,EACI,qCADJ,mDAEgDA,GAEjDhB,MAAMkB,GACJjB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJR,EAAWoB,GACXlB,EAAeM,OAU2CI,MAAOb,EAA7D,UACC,cAACwB,EAAA,EAAD,CAAUX,MAAM,YAAhB,uBAEGf,EAAUa,KAAI,SAAAX,GAAO,OACnB,cAACwB,EAAA,EAAD,CAAUX,MAAOb,EAAQa,MAAzB,SAAiCb,EAAQY,kBAOrD,sBAAKtB,UAAU,YAAf,UACE,cAAC,EAAD,CAASV,MAAM,QAAQC,MAAOqB,EAAYrB,QAC1C,cAAC,EAAD,CAASD,MAAM,YAAYC,MAAOqB,EAAYuB,YAC9C,cAAC,EAAD,CAAS7C,MAAM,SAASC,MAAOqB,EAAYwB,YAI7C,qBAAKpC,UAAU,YAAf,SACE,cAAC,EAAD,CAAKV,MAAM,oBAAoBC,MAAO,IAAKC,MAAO,cCrEtC6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzD,QAAQyD,MAAMA,EAAMC,c","file":"static/js/main.374f5fd2.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\r\nimport \"./InfoBox.css\";\r\n\r\nfunction InfoBox({ title, cases, total, active, isRed, ...props }) {\r\n  console.log(title, active);\r\n  return (\r\n    <Card\r\n      onClick={props.onClick}\r\n      className={`infoBox ${active && \"infoBox--selected\"} ${\r\n        isRed && \"infoBox--red\"\r\n      }`}\r\n    >\r\n      <CardContent>\r\n        <Typography color=\"textSecondary\" gutterBottom>\r\n          {title}\r\n        </Typography>\r\n        <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>\r\n          {cases}\r\n        </h2>\r\n\r\n        <Typography className=\"infoBox__total\" color=\"textSecondary\">\r\n          {total} Total\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default InfoBox;","import React from 'react'\r\n\r\nfunction Map() {\r\n    return (\r\n        <div>\r\n            <h1></h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Map\r\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport {\n  MenuItem,\n  FormControl,\n  Select,\n} from \"@material-ui/core\";\nimport InfoBox from \"./InfoBox\";\nimport Map from \"./Map\";\n\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState(\"Worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  \n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data);\n      });\n  }, []);\n  \n  useEffect(() => {\n    const getCountriesData = async() => {\n      await fetch (\"https://disease.sh/v3/covid-19/countries\")\n      .then((response) => response.json())\n      .then((data) => {\n        const countries = data.map((country) => ({\n          name: country.country,\n          value: country.countryInfo.iso2,\n        }));\n        setCountries(countries);\n      })\n    }\n    getCountriesData();\n  }, []);\n\n  const onCountryChange = (event) => {\n    const countryCode = event.target.value;\n    setCountry(countryCode);\n\n    const url = \n      countryCode === 'Worldwide' \n        ? 'https://disease.sh/v3/covid-19/all' \n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n     fetch(url)\n      .then(response => response.json())\n      .then(data => {\n        setCountry(countryCode)\n        setCountryInfo(data);\n      })\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n      <div className=\"app__header\">\n        <h1>COVID-19 Statistics</h1>\n          <FormControl className=\"app_dropdown\">\n            <Select variant=\"outlined\" onChange={onCountryChange} value={country}>\n             <MenuItem value=\"Worldwide\">Worldwide</MenuItem>\n              {\n                countries.map(country => (\n                  <MenuItem value={country.value}>{country.name}</MenuItem>\n                ))\n              }\n            </Select>\n        </FormControl> \n      </div>\n\n      <div className=\"app_stats\">\n        <InfoBox title=\"Cases\" cases={countryInfo.cases}/>\n        <InfoBox title=\"Recovered\" cases={countryInfo.recovered}/>\n        <InfoBox title=\"Deaths\" cases={countryInfo.deaths}/>\n        \n      </div>\n\n      <div className=\"app_stats\">\n        <Map title=\"Coronavirus Cases\" cases={123} total={2000}/>\n      </div>  \n        </div>    \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}